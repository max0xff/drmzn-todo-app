!function(t){var e={};function o(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)o.d(n,s,function(e){return t[e]}.bind(null,s));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s="./src/server.ts")}({"./src/components/footer.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react");e.default=n.memo(t=>{const e=t.state.Main.todo.options;if(!e.hasData)return null;const o=e.isOneCount?"item":"items";return n.createElement("footer",{className:"footer"},n.createElement("span",{className:"todo-count"},n.createElement("strong",null,e.countNotComplete)," ",o," left"),n.createElement("ul",{className:"filters"},n.createElement("li",null,n.createElement("a",{className:e.filter.all?"selected":"",href:"#/"},"All")),n.createElement("li",null,n.createElement("a",{className:e.filter.active?"selected":"",href:"#/active"},"Active")),n.createElement("li",null,n.createElement("a",{className:e.filter.completed?"selected":"",href:"#/completed"},"Completed"))),(()=>{if(e.hasCompleted)return n.createElement("button",{className:"clear-completed"},"Clear completed")})())})},"./src/components/header.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react");e.default=n.memo(()=>n.createElement("div",{id:"header"},n.createElement("header",{className:"header"},n.createElement("h1",null,"todos"),n.createElement("input",{className:"new-todo",placeholder:"What needs to be done?",autoFocus:!0}))))},"./src/components/root.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react"),s=o("react-redux"),i=o("./src/components/header.tsx"),a=o("./src/components/footer.tsx"),r=o("./src/components/todos.tsx");e.default=s.connect(function(t){return t})(t=>n.createElement("section",{className:"todoapp"},n.createElement(i.default,null),n.createElement(r.default,{state:t.state}),n.createElement(a.default,{state:t.state})))},"./src/components/todo.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react"),s=o("./src/config/functions.ts");e.default=n.memo(t=>{const e=t.data;return n.createElement("li",{key:e.id,"data-id":e.id,className:s.classNames(e)},n.createElement("div",{className:"view"},n.createElement("input",{className:"toggle",type:"checkbox",checked:e.isCompleted,onChange:function(){}}),n.createElement("label",null,e.text),n.createElement("button",{className:"destroy"})),n.createElement("input",{type:"text",className:"edit",defaultValue:e.text,"data-text":e.text}))})},"./src/components/todos.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react"),s=o("./src/components/todo.tsx");e.default=n.memo(t=>{const e=t.state.Main.todo.data,o=t.state.Main.todo.options;if(!o.hasData)return null;return n.createElement("section",{className:"main"},n.createElement("input",{id:"toggle-all",className:"toggle-all",type:"checkbox",checked:o.isAllComplete,onChange:function(){}}),n.createElement("label",{htmlFor:"toggle-all"},"Mark all as complete"),n.createElement("ul",{className:"todo-list"},e.filter(t=>t.isVisible).map(t=>n.createElement(s.default,{data:t,key:t.id}))))})},"./src/config/actions.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("object-path-immutable/index");var s;(s=e.page||(e.page={})).type="PAGE",s.dispatch=((t,e)=>{t.dispatch({type:s.type,page:e})}),s.reduce=((t,e)=>n(t).set("Main.options.mainPage",{}).set(`Main.options.mainPage.${e.page}`,!0).value()),function(t){t.type="init",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.init||(e.init={})),function(t){t.type="add",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.add||(e.add={})),function(t){t.type="edit",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.edit||(e.edit={})),function(t){t.type="remove",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.remove||(e.remove={})),function(t){t.type="toggle",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.toggle||(e.toggle={})),function(t){t.type="toggleAll",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.toggleAll||(e.toggleAll={})),function(t){t.type="filterBy",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.filterBy||(e.filterBy={})),function(t){t.type="removeCompleted",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.removeCompleted||(e.removeCompleted={})),function(t){t.type="toggleEditing",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.toggleEditing||(e.toggleEditing={})),function(t){t.type="monitorSaga",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.saga.test",e.data).set("Main.saga.reducer","yoyo").value())}(e.monitorSaga||(e.monitorSaga={}))},"./src/config/functions.ts":function(t,e,o){"use strict";function n(t){return JSON.parse(JSON.stringify(t))}function s(t,e){let o="all",n="/";return"#/"===e&&(o="all",n="/"),"#/active"===e&&(o="active",n="/active"),"#/completed"===e&&(o="completed",n="/completed"),"type"===t?o:n}function i(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}function a(t,e){let o=-1;for(let n=0;n<t.length;n++){t[n].id===e&&(o=n)}return o}function r(t,e){const o=t.getState();let n={all:!0};o&&o.Main&&o.Main.todo&&o.Main.todo.options&&o.Main.todo.options.filter&&(n=Object.assign({},o.Main.todo.options.filter));const s={countTotal:0,countComplete:0,countNotComplete:0,hasCompleted:!1,isAllComplete:!1,isEditing:!1,hasData:!1,isOneCount:!1,filter:n};s.countTotal=e.length,e.forEach(t=>{t.isCompleted?s.countComplete=s.countComplete+1:s.countNotComplete=s.countNotComplete+1,t.isEditing&&(s.isEditing=!0)}),s.countComplete>0&&(s.hasCompleted=!0),e.length===s.countComplete&&(s.isAllComplete=!0),e.length>0&&(s.hasData=!0),1===s.countNotComplete&&(s.isOneCount=!0);try{localStorage.setItem("todos-drmzn",JSON.stringify(e))}catch(t){}return s}Object.defineProperty(e,"__esModule",{value:!0}),e.classNames=function(t){let e="";return t.isCompleted&&(e=`${e} completed`),t.isEditing&&(e=`${e} editing`),e.trim()},e.getProp=s,e.randomId=i,e.getIndex=a,e.computeOptions=r,e.computeInit=function(t,e){let o;try{(o=JSON.parse(localStorage.getItem("todos-drmzn"))).forEach(t=>{t.isEditing=!1})}catch(t){}o||(o=[]);const n=r(t,o),i=s("type",e);return n.filter={},n.filter[i]=!0,{data:o,options:n}},e.computeAdd=function(t,e){const o=t.getState(),s=n(o.Main.todo.data);let a=!0;o.Main.todo.options.filter.completed&&(a=!1);const c={id:i(),text:e.trim(),isCompleted:!1,isVisible:a};return s.push(c),{data:s,options:r(t,s)}},e.computeEdit=function(t,e,o){const s=n(t.getState().Main.todo.data);return s[a(s,e)].text=o.trim(),{data:s,options:r(t,s)}},e.computeRemove=function(t,e){const o=n(t.getState().Main.todo.data),s=a(o,e);return o.splice(s,1),{data:o,options:r(t,o)}},e.computeToggle=function(t,e){const o=t.getState(),s=n(o.Main.todo.data),i=a(s,e);return s[i].isCompleted=!s[i].isCompleted,o.Main.todo.options.filter.completed&&(s[i].isVisible=!!s[i].isCompleted),o.Main.todo.options.filter.active&&(s[i].isVisible=!s[i].isCompleted),{data:s,options:r(t,s)}},e.computeToggleAll=function(t){const e=t.getState(),o=n(e.Main.todo.data);let s=!0;return o.forEach(t=>{!1===t.isCompleted&&(s=!1)}),o.forEach(t=>{s?(t.isCompleted=!1,e.Main.todo.options.filter.completed&&(t.isVisible=!1),e.Main.todo.options.filter.active&&(t.isVisible=!0)):(t.isCompleted=!0,e.Main.todo.options.filter.completed&&(t.isVisible=!0),e.Main.todo.options.filter.active&&(t.isVisible=!1))}),{data:o,options:r(t,o)}},e.computeFilterBy=function(t,e="all"){const o=n(t.getState().Main.todo.data);"active"===e&&o.forEach(t=>{!1===t.isCompleted?t.isVisible=!0:t.isVisible=!1}),"completed"===e&&o.forEach(t=>{!0===t.isCompleted?t.isVisible=!0:t.isVisible=!1}),"all"===e&&o.forEach(t=>{t.isVisible=!0});const s=r(t,o);return s.filter={},s.filter[e]=!0,{data:o,options:s}},e.computeRemoveCompleted=function(t){const e=n(t.getState().Main.todo.data).filter(t=>!1===t.isCompleted);return{data:e,options:r(t,e)}},e.computeToggleEdit=function(t,e,o,s){const i=n(t.getState().Main.todo.data);if(i.forEach(t=>{t.isEditing=!1}),e&&"on"===o){const t=a(i,e);t>-1&&(i[t].isEditing=!0)}e&&s&&"off"===o&&(i[a(i,e)].text=s);return{data:i,options:r(t,i)}}},"./src/config/placeholder.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.placeholder=((t,e,o)=>`<!doctype html>\n<html lang="en">\n\t<head>\n\t\t<meta charset="utf-8">\n\t\t<meta name="viewport" content="width=device-width, initial-scale=1">\n\t\t<title>Drmzn • TodoMVC</title>\n\t\t<link rel="stylesheet" href="/css/base.css">\n\t\t<link rel="stylesheet" href="/css/index.css">\n\t\t<link rel="stylesheet" href="/css/app.css">\n\t</head>\n\t<body>\n\t\t<div id="root">${t}</div>\n\n\t\t<footer class="info">\n\t\t\t<p>Double-click to edit a todo</p>\n\t\t\t<p>Created by <a href="mailto:alex.tzvetanov@gmail.com">Alex Tzvetanov</a></p>\n\t\t\t<p>Part of <a href="http://todomvc.com">TodoMVC</a></p>\n\t\t</footer>\n\n\t\t<script>\n      window.__PRELOADED_STATE__ = '${e}';\n    <\/script>\n\n\t\t<script src="/js/base.js"><\/script>\n    <script type="text/javascript" src="/js/main.${o}.min.js"><\/script>\n  </body>\n</html>`)},"./src/config/store.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("./src/config/actions.ts"),s=o("redux"),i=o("redux-saga"),a=o("redux-devtools-extension"),r=o("drmzn-redux");e.sagaMiddleware=i.default(),e.storeCreate=(()=>s.createStore(r.actionReducer(n),r.hydrate,a.composeWithDevTools(s.applyMiddleware(e.sagaMiddleware)))),e.store=e.storeCreate()},"./src/controllers/TodoController.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("./src/config/actions.ts"),s=o("./src/config/functions.ts");e.Todo=(t=>{return{init:e=>{const{data:o,options:i}=s.computeInit(t,e);n.init.dispatch(t,o,i)},add:e=>{const{data:o,options:i}=s.computeAdd(t,e);n.add.dispatch(t,o,i)},edit:(e,o)=>{const{data:i,options:a}=s.computeEdit(t,e,o);n.edit.dispatch(t,i,a)},remove:e=>{const{data:o,options:i}=s.computeRemove(t,e);n.remove.dispatch(t,o,i)},toggle:e=>{const{data:o,options:i}=s.computeToggle(t,e);n.toggle.dispatch(t,o,i)},toggleAll:()=>{const{data:e,options:o}=s.computeToggleAll(t);n.toggleAll.dispatch(t,e,o)},filterBy:e=>{const{data:o,options:i}=s.computeFilterBy(t,e);n.filterBy.dispatch(t,o,i)},removeCompleted:()=>{const{data:e,options:o}=s.computeRemoveCompleted(t);n.removeCompleted.dispatch(t,e,o)},toggleEditing:(e,o,i)=>{const{data:a,options:r}=s.computeToggleEdit(t,e,o,i);n.toggleEditing.dispatch(t,a,r)}}})},"./src/server.ts":function(t,e,o){"use strict";var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))(function(s,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function r(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){t.done?s(t.value):new o(function(e){e(t.value)}).then(a,r)}c((n=n.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});const s=o("express"),i=o("compression"),a=o("http"),r=o("pusher"),c=o("js-string-escape"),l=o("./src/config/store.ts"),d=o("./src/controllers/TodoController.ts"),p=o("./src/config/placeholder.ts"),u=o("drmzn-react"),m=o("./src/components/root.tsx"),f=new r({appId:process.env.APPID,key:process.env.KEY,secret:process.env.SECRET,cluster:process.env.CLUSTER,useTLS:process.env.ENCRYPTED}),g=s();g.use(i()),g.get("/",(t,e)=>n(this,void 0,void 0,function*(){const o=l.storeCreate();yield d.Todo(o).init("/"),u.ssr(p.placeholder,m.default,"0.0.3").render(o,t,e)})),g.get("/secret-message/:message",(t,e)=>n(this,void 0,void 0,function*(){const o=c(t.params.message);f.trigger("drmzn","secret-message",{message:o}),e.status(200).end()})),g.use("/",s.static("public")),a.createServer(g).listen(process.env.PORT)},compression:function(t,e){t.exports=require("compression")},"drmzn-react":function(t,e){t.exports=require("drmzn-react")},"drmzn-redux":function(t,e){t.exports=require("drmzn-redux")},express:function(t,e){t.exports=require("express")},http:function(t,e){t.exports=require("http")},"js-string-escape":function(t,e){t.exports=require("js-string-escape")},"object-path-immutable/index":function(t,e){t.exports=require("object-path-immutable/index")},pusher:function(t,e){t.exports=require("pusher")},react:function(t,e){t.exports=require("react")},"react-redux":function(t,e){t.exports=require("react-redux")},redux:function(t,e){t.exports=require("redux")},"redux-devtools-extension":function(t,e){t.exports=require("redux-devtools-extension")},"redux-saga":function(t,e){t.exports=require("redux-saga")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,