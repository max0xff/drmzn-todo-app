!function(t){var e={};function o(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(n,a,function(e){return t[e]}.bind(null,a));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s="./src/server.ts")}({"./src/components/footer.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react");e.default=n.memo(t=>{const e=t.state.Main.todo.options;if(!e.hasData)return null;const o=e.isOneCount?"item":"items";return n.createElement("footer",{className:"footer"},n.createElement("span",{className:"todo-count"},n.createElement("strong",null,e.countNotComplete)," ",o," left"),n.createElement("ul",{className:"filters"},n.createElement("li",null,n.createElement("a",{className:e.filter.all?"selected":"",href:"#/"},"All")),n.createElement("li",null,n.createElement("a",{className:e.filter.active?"selected":"",href:"#/active"},"Active")),n.createElement("li",null,n.createElement("a",{className:e.filter.completed?"selected":"",href:"#/completed"},"Completed"))),(()=>{if(e.hasCompleted)return n.createElement("button",{className:"clear-completed"},"Clear completed")})())})},"./src/components/header.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react");e.default=n.memo(()=>n.createElement("div",{id:"header"},n.createElement("header",{className:"header"},n.createElement("h1",null,"todos"),n.createElement("input",{className:"new-todo",placeholder:"What needs to be done?",autoFocus:!0}))))},"./src/components/root.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react"),a=o("react-redux"),s=o("./src/components/header.tsx"),i=o("./src/components/footer.tsx"),c=o("./src/components/todos.tsx");e.default=a.connect(function(t){return t})(t=>n.createElement("section",{className:"todoapp"},n.createElement(s.default,null),n.createElement(c.default,{state:t.state}),n.createElement(i.default,{state:t.state})))},"./src/components/todo.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react"),a=o("./src/config/functions.ts");e.default=n.memo(t=>{const e=t.data;return n.createElement("li",{key:e.id,"data-id":e.id,className:a.classNames(e)},n.createElement("div",{className:"view"},n.createElement("input",{className:"toggle",type:"checkbox",checked:e.isCompleted,onChange:function(){}}),n.createElement("label",null,e.text),n.createElement("button",{className:"destroy"})),n.createElement("input",{type:"text",className:"edit",defaultValue:e.text,"data-text":e.text}))})},"./src/components/todos.tsx":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("react"),a=o("./src/components/todo.tsx");e.default=n.memo(t=>{const e=t.state.Main.todo.data,o=t.state.Main.todo.options;if(!o.hasData)return null;return n.createElement("section",{className:"main"},n.createElement("input",{id:"toggle-all",className:"toggle-all",type:"checkbox",checked:o.isAllComplete,onChange:function(){}}),n.createElement("label",{htmlFor:"toggle-all"},"Mark all as complete"),n.createElement("ul",{className:"todo-list"},e.filter(t=>t.isVisible).map(t=>n.createElement(a.default,{data:t,key:t.id}))))})},"./src/config/actions.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("object-path-immutable/index");var a,s;(a=e.page||(e.page={})).type="PAGE",a.dispatch=((t,e)=>{t.dispatch({type:a.type,page:e})}),a.reduce=((t,e)=>n(t).set("Main.options.mainPage",{}).set(`Main.options.mainPage.${e.page}`,!0).value()),function(t){t.type="INIT",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,options:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options",e.options).value())}(e.init||(e.init={})),(s=e.options||(e.options={})).type="OPTIONS",s.dispatch=((t,e)=>{t.dispatch({type:s.type,options:e})}),s.reduce=((t,e)=>n(t).set("Main.todo.options",e.options).value()),function(t){t.type="ADD",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).value())}(e.add||(e.add={})),function(t){t.type="EDIT",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).value())}(e.edit||(e.edit={})),function(t){t.type="REMOVE",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).value())}(e.remove||(e.remove={})),function(t){t.type="TOGGLE",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).value())}(e.toggle||(e.toggle={})),function(t){t.type="TOGGLE_ALL",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).value())}(e.toggleAll||(e.toggleAll={})),function(t){t.type="FILTER_BY",t.dispatch=((e,o,n)=>{e.dispatch({type:t.type,data:o,filter:n})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).set("Main.todo.options.filter",{}).set(`Main.todo.options.filter.${e.filter}`,!0).value())}(e.filterBy||(e.filterBy={})),function(t){t.type="REMOVE_COMPLETED",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).value())}(e.removeCompleted||(e.removeCompleted={})),function(t){t.type="TOGGLE_EDITING",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.todo.data",e.data).value())}(e.toggleEditing||(e.toggleEditing={})),function(t){t.type="monitorSaga",t.dispatch=((e,o)=>{e.dispatch({type:t.type,data:o})}),t.reduce=((t,e)=>n(t).set("Main.saga.test",e.data).set("Main.saga.reducer","yoyo").value())}(e.monitorSaga||(e.monitorSaga={}))},"./src/config/functions.ts":function(t,e,o){"use strict";function n(t){return JSON.parse(JSON.stringify(t))}function a(t,e){let o="all",n="/";return"#/"===e&&(o="all",n="/"),"#/active"===e&&(o="active",n="/active"),"#/completed"===e&&(o="completed",n="/completed"),"type"===t?o:n}function s(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}function i(t,e){let o=-1;for(let n=0;n<t.length;n++){t[n].id===e&&(o=n)}return o}function c(t,e){const o=t.getState();let n={all:!0};o&&o.Main&&o.Main.todo&&o.Main.todo.options&&o.Main.todo.options.filter&&(n=Object.assign({},o.Main.todo.options.filter));const a={countTotal:0,countComplete:0,countNotComplete:0,hasCompleted:!1,isAllComplete:!1,isEditing:!1,hasData:!1,isOneCount:!1,filter:n};a.countTotal=e.length,e.forEach(t=>{t.isCompleted?a.countComplete=a.countComplete+1:a.countNotComplete=a.countNotComplete+1,t.isEditing&&(a.isEditing=!0)}),a.countComplete>0&&(a.hasCompleted=!0),e.length===a.countComplete&&(a.isAllComplete=!0),e.length>0&&(a.hasData=!0),1===a.countNotComplete&&(a.isOneCount=!0);try{localStorage.setItem("todos-drmzn",JSON.stringify(e))}catch(t){}return a}Object.defineProperty(e,"__esModule",{value:!0}),e.classNames=function(t){let e="";return t.isCompleted&&(e=`${e} completed`),t.isEditing&&(e=`${e} editing`),e.trim()},e.getProp=a,e.randomId=s,e.getIndex=i,e.computeOptions=c,e.computeInit=function(t,e){let o;try{(o=JSON.parse(localStorage.getItem("todos-drmzn"))).forEach(t=>{t.isEditing=!1})}catch(t){}o||(o=[]);const n=c(t,o),s=a("type",e);return n.filter={},n.filter[s]=!0,{data:o,options:n}},e.computeAdd=function(t,e){const o=t.getState(),a=n(o.Main.todo.data);let i=!0;o.Main.todo.options.filter.completed&&(i=!1);const c={id:s(),text:e.trim(),isCompleted:!1,isVisible:i};return a.push(c),a},e.computeEdit=function(t,e,o){const a=n(t.getState().Main.todo.data);return a[i(a,e)].text=o.trim(),a},e.computeRemove=function(t,e){const o=n(t.getState().Main.todo.data),a=i(o,e);return o.splice(a,1),o},e.computeToggle=function(t,e){const o=t.getState(),a=n(o.Main.todo.data),s=i(a,e);return a[s].isCompleted=!a[s].isCompleted,o.Main.todo.options.filter.completed&&(a[s].isVisible=!!a[s].isCompleted),o.Main.todo.options.filter.active&&(a[s].isVisible=!a[s].isCompleted),a},e.computeToggleAll=function(t){const e=t.getState(),o=n(e.Main.todo.data);let a=!0;return o.forEach(t=>{!1===t.isCompleted&&(a=!1)}),o.forEach(t=>{a?(t.isCompleted=!1,e.Main.todo.options.filter.completed&&(t.isVisible=!1),e.Main.todo.options.filter.active&&(t.isVisible=!0)):(t.isCompleted=!0,e.Main.todo.options.filter.completed&&(t.isVisible=!0),e.Main.todo.options.filter.active&&(t.isVisible=!1))}),o},e.computeFilterBy=function(t,e="all"){const o=n(t.getState().Main.todo.data);return o.forEach(t=>{"active"===e?t.isVisible=!1===t.isCompleted:"completed"===e?t.isVisible=!0===t.isCompleted:"all"===e&&(t.isVisible=!0)}),o},e.computeRemoveCompleted=function(t){return n(t.getState().Main.todo.data).filter(t=>!1===t.isCompleted)},e.computeToggleEdit=function(t,e,o,a){const s=n(t.getState().Main.todo.data);if(s.forEach(t=>{t.isEditing=!1}),e&&"on"===o){const t=i(s,e);t>-1&&(s[t].isEditing=!0)}e&&a&&"off"===o&&(s[i(s,e)].text=a);return s}},"./src/config/placeholder.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.placeholder=((t,e,o)=>`<!doctype html>\n<html lang="en">\n\t<head>\n\t\t<meta charset="utf-8">\n\t\t<meta name="viewport" content="width=device-width, initial-scale=1">\n\t\t<title>Drmzn â€¢ TodoMVC</title>\n\t\t<link rel="stylesheet" href="/css/base.css">\n\t\t<link rel="stylesheet" href="/css/index.css">\n\t\t<link rel="stylesheet" href="/css/app.css">\n\t</head>\n\t<body>\n\t\t<div id="root">${t}</div>\n\n\t\t<footer class="info">\n\t\t\t<p>Double-click to edit a todo</p>\n\t\t\t<p>Created by <a href="mailto:alex.tzvetanov@gmail.com">Alex Tzvetanov</a></p>\n\t\t\t<p>Part of <a href="http://todomvc.com">TodoMVC</a></p>\n\t\t</footer>\n\n\t\t<script>\n      window.__PRELOADED_STATE__ = '${e}';\n    <\/script>\n\n    <script type="text/javascript" src="/js/main.${o}.min.js"><\/script>\n  </body>\n</html>`)},"./src/config/sagas.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("redux-saga/effects"),a=o("./src/config/store.ts"),s=o("./src/sagas/someSaga.ts"),i=o("./src/sagas/optionsSelectorSaga.ts");function*c(){yield n.all([i.default(),s.default()])}e.runSagas=function(){console.log("runs sagas"),a.sagaMiddleware.run(c)}},"./src/config/store.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("./src/config/actions.ts"),a=o("redux"),s=o("redux-saga"),i=o("redux-devtools-extension"),c=o("drmzn-redux");e.sagaMiddleware=s.default(),e.storeCreate=(()=>a.createStore(c.actionReducer(n),c.hydrate,i.composeWithDevTools(a.applyMiddleware(e.sagaMiddleware)))),e.store=e.storeCreate()},"./src/controllers/TodoController.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("./src/config/actions.ts"),a=o("./src/config/functions.ts");e.Todo=(t=>{return{init:e=>{const{data:o,options:s}=a.computeInit(t,e);return n.init.dispatch(t,o,s),Promise.resolve()},add:e=>{const o=a.computeAdd(t,e);n.add.dispatch(t,o)},edit:(e,o)=>{const s=a.computeEdit(t,e,o);n.edit.dispatch(t,s)},remove:e=>{const o=a.computeRemove(t,e);n.remove.dispatch(t,o)},toggle:e=>{const o=a.computeToggle(t,e);n.toggle.dispatch(t,o)},toggleAll:()=>{const e=a.computeToggleAll(t);n.toggleAll.dispatch(t,e)},filterBy:e=>{const o=a.computeFilterBy(t,e);n.filterBy.dispatch(t,o,e)},removeCompleted:()=>{const e=a.computeRemoveCompleted(t);n.removeCompleted.dispatch(t,e)},toggleEditing:(e,o,s)=>{const i=a.computeToggleEdit(t,e,o,s);n.toggleEditing.dispatch(t,i)}}})},"./src/sagas/optionsSelectorSaga.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("redux-saga/effects"),a=o("./src/config/actions.ts"),s=o("./src/config/store.ts"),i=o("./src/config/functions.ts");function*c(t){(yield"OPTIONS"===t.type)&&(yield n.cancel());const e=yield s.store.getState();if(e&&e.Main&&e.Main.todo&&e.Main.todo.data){const t=yield i.computeOptions(s.store,e.Main.todo.data);yield n.call(a.options.dispatch,s.store,t)}}e.default=function*(){yield n.takeLatest("*",c)}},"./src/sagas/someSaga.ts":function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=o("redux-saga/effects"),a=o("./src/config/actions.ts"),s=o("./src/config/store.ts");function*i(){yield n.delay(2e3),yield console.log("yoyo, added items?"),yield a.monitorSaga.dispatch(s.store,"testing action-reducer after add action")}e.default=function*(){yield n.takeLatest("ADD",i)}},"./src/server.ts":function(t,e,o){"use strict";var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))(function(a,s){function i(t){try{r(n.next(t))}catch(t){s(t)}}function c(t){try{r(n.throw(t))}catch(t){s(t)}}function r(t){t.done?a(t.value):new o(function(e){e(t.value)}).then(i,c)}r((n=n.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});const a=o("express"),s=o("compression"),i=o("http"),c=o("./src/config/store.ts"),r=o("./src/controllers/TodoController.ts"),l=o("./src/config/placeholder.ts"),d=o("./src/config/sagas.ts"),u=o("drmzn-react"),p=o("./src/components/root.tsx"),f=a();f.use(s()),f.get("/",(t,e)=>n(this,void 0,void 0,function*(){const o=c.storeCreate();d.runSagas(),yield r.Todo(o).init("/"),u.ssr(l.placeholder,p.default,"0.0.6").render(o,t,e)})),f.use("/",a.static("public")),i.createServer(f).listen(process.env.PORT)},compression:function(t,e){t.exports=require("compression")},"drmzn-react":function(t,e){t.exports=require("drmzn-react")},"drmzn-redux":function(t,e){t.exports=require("drmzn-redux")},express:function(t,e){t.exports=require("express")},http:function(t,e){t.exports=require("http")},"object-path-immutable/index":function(t,e){t.exports=require("object-path-immutable/index")},react:function(t,e){t.exports=require("react")},"react-redux":function(t,e){t.exports=require("react-redux")},redux:function(t,e){t.exports=require("redux")},"redux-devtools-extension":function(t,e){t.exports=require("redux-devtools-extension")},"redux-saga":function(t,e){t.exports=require("redux-saga")},"redux-saga/effects":function(t,e){t.exports=require("redux-saga/effects")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,